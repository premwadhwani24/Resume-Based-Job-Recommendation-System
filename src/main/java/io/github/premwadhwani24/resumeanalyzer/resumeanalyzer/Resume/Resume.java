package io.github.premwadhwani24.resumeanalyzer.resumeanalyzer.Resume;

import io.github.premwadhwani24.resumeanalyzer.resumeanalyzer.User.User;
import jakarta.persistence.*;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.PastOrPresent;
import java.time.LocalDate;
import java.util.Objects;

/**
 * Represents a Resume entity containing details about the uploaded resume,
 * parsed skills, upload date, and the user who uploaded it.
 * This entity is mapped to the "resumes" table in the database.
 */
@Entity
@Table(name = "resumes")
public class Resume {

    /** Unique identifier for each resume. Auto-generated by the database. */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /** Name of the uploaded resume file. Cannot be blank. */
    @NotBlank(message = "File name is required.")
    private String fileName;

    /** Skills parsed from the resume, stored as a string. */
    @Column(length = 1000)
    private String parsedSkills;

    /** Date the resume was uploaded. Must be today or a past date. */
    @PastOrPresent(message = "Upload date must be today or in the past.")
    private LocalDate uploadedAt;

    /** The user who uploaded the resume. Linked via foreign key user_id. */
    @ManyToOne
    @JoinColumn(name = "user_id", nullable = false)
    private User user;

    /** No-argument constructor (required by JPA) */
    public Resume() {}

    /**
     * Parameterized constructor to initialize a Resume object.
     *
     * @param id            Unique resume identifier
     * @param fileName      Name of the uploaded file
     * @param parsedSkills  Extracted skills from the resume
     * @param uploadedAt    Date when the resume was uploaded
     * @param user          The user who uploaded the resume
     */
    public Resume(Long id, String fileName, String parsedSkills, LocalDate uploadedAt, User user) {
        this.id = id;
        this.fileName = fileName;
        this.parsedSkills = parsedSkills;
        this.uploadedAt = uploadedAt;
        this.user = user;
    }

    // Getters and Setters

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getFileName() {
        return fileName;
    }

    public void setFileName(String fileName) {
        this.fileName = fileName;
    }

    public String getParsedSkills() {
        return parsedSkills;
    }

    public void setParsedSkills(String parsedSkills) {
        this.parsedSkills = parsedSkills;
    }

    public LocalDate getUploadedAt() {
        return uploadedAt;
    }

    public void setUploadedAt(LocalDate uploadedAt) {
        this.uploadedAt = uploadedAt;
    }

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    /**
     * Compares two Resume objects based on their fields.
     *
     * @param o Object to compare with
     * @return true if all fields match, false otherwise
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Resume)) return false;
        Resume resume = (Resume) o;
        return Objects.equals(id, resume.id)
                && Objects.equals(fileName, resume.fileName)
                && Objects.equals(parsedSkills, resume.parsedSkills)
                && Objects.equals(uploadedAt, resume.uploadedAt)
                && Objects.equals(user, resume.user);
    }

    /**
     * Generates hash code based on all resume fields.
     *
     * @return int hash code value
     */
    @Override
    public int hashCode() {
        return Objects.hash(id, fileName, parsedSkills, uploadedAt, user);
    }

    /**
     * Returns a string representation of the Resume object.
     *
     * @return String describing the resume
     */
    @Override
    public String toString() {
        return "Resume{" +
                "id=" + id +
                ", fileName='" + fileName + '\'' +
                ", parsedSkills='" + parsedSkills + '\'' +
                ", uploadedAt=" + uploadedAt +
                ", user=" + user +
                '}';
    }
}
